#include <stdio.h>		//puts, printf, etc.
#include <string.h>		//strlen
#include <sys/socket.h>		//socket, connect, send, recv, etc.
#include <arpa/inet.h>		//inet_addr
#include <unistd.h>		//close
#include <netdb.h>
#include <stdlib.h>
#include <myutils.h>
#include <ncurses.h>

#define MAXCHARS 4096		//just a large buffer for data chunks
#define _MAIN_C_

#include "myclient.h"


int
main (int argc, char *argv[])
{
  struct timeval tv;
  srv_status retval;

  char tmpfile[64];
  tmpnam (tmpfile);
  char message[20];
  int port = 50000;
  char addr[20];

  int sock = socket (AF_UNIX, SOCK_STREAM, 0);

  if (sock == -1)
    {
      perror ("error creating socket");
    }

  sprintf (addr, "192.168.0.10");

  tv.tv_sec = 0;
  tv.tv_usec = 600000;
  retval = pari_TestServer (addr, port, &tv);


  struct sockaddr_un addr;
  memset (&addr, 0, sizeof (addr));
  addr.sun_family = AF_UNIX;
  strncpy (addr.sun_path, tmpfile, strlen (tmpfile));

  //int ret;



  switch (retval)
    {
    case NOTAVAILABLE:
      printw ("%s:%d - Offline\n", addr, port);
      endwin ();
      return 0;
      break;
    case PORTCLOSED:
      printw ("%s:%d - Closed\n", addr, port);
      endwin ();
      break;
      return 0;
    case PORTOPEN:
      printw ("%s:%d - Open\n", addr, port);
      break;
    }



  pid_t pid = fork ();

  if (pid < 0)
    {
      perror ("Fork faild");
    }

// ------------CHILD------------------- 

  if (pid == 0)			//I am the child
    {
      char *Dir1 = malloc (1);
      char *Dir2 = malloc (1);
      int *left = malloc (sizeof (int));
      int *right = malloc (sizeof (int));
      if (!Dir1 || !Dir2 || !left || !right)
	return 0;

      *Dir1 = 'F';
      *Dir2 = 'F';
      *left = 0;
      *right = 0;

      sprintf (message, "MM%s%d-%s%d>", Dir1, *left, Dir2, *right);

      initscr ();		/* Start curses mode              */
      noecho ();

      if (connect (sock, (struct sockaddr *) &addr, sizeof (addr)) == -1)
	{
	  perror ("child connect error");
	  exit (-1);
	}
      do
	{
	  int ch;
	  ch = getch ();	//waits for user input

	  if (ch == '\033')
	    {			// if the first value is esc
	      getch ();		// skip the [
	      switch (getch ())
		{		// the real value
		case 'A':
		  mvprintw (1, 0, "arrow up\n");

		  CreateNewMessage ('A', Dir1, Dir2, left, right, message);
		  mvprintw (2, 0, "message:%s\n", message);
		  break;
		case 'B':
		  mvprintw (1, 0, "arrow down\n");

		  CreateNewMessage ('B', Dir1, Dir2, left, right, message);
		  mvprintw (2, 0, "message:%s\n", message);

		  break;
		case 'C':
		  mvprintw (1, 0, "code for arrow right\n");
		  CreateNewMessage ('C', Dir1, Dir2, left, right, message);
		  mvprintw (2, 0, "message:%s\n", message);

		  break;
		case 'D':
		  mvprintw (1, 0, " code for arrow left\n");
		  CreateNewMessage ('D', Dir1, Dir2, left, right, message);
		  mvprintw (2, 0, "message:%s\n", message);

		  break;
		}
	    }
	  else if (ch == ' ')	// request encoder
	    {
	      mvprintw (1, 0, " code for encorder\n");
	      sprintf (message, "EN>");
	    }
	}


      if (send (sock, message, strlen (message), 0) < 0)
	{
	  perror ("Send failed\n");
	  return 0;
	}
      while (1)
	free (Dir1);
      free (Dir2);
      free (left);
      free (right);
      endwin ();
      exit ();
      }
// ------------CHILD END------------------- 


// -----------We must me the parent---------------

      if (bind (sock, (struct sockaddr *) &addr, sizeof (addr)) == -1)
	{
	  perror ("bind error");
	  exit (-1);
	}

      if (listen (sock, 5) == -1)
	{
	  perror ("listen error");
	  exit (-1);
	}

      int cl;
      if ((cl = accept (sock, NULL, NULL)) == -1)
	{
	  perror ("accept error");
	  exit (-1);
	}

      do
	{
	  int rc;
	  char msg[256];
	  ret = recv (sock, server_reply, maxChars, 0);
	  int sock2;
	  sock2 =
	    pari_AskDataFromServer (addr, port, msg, server_reply, MAXCHARS);
	close (sock2)
}
      while (1)
      }
